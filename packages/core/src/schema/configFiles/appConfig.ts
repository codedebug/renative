import { z } from 'zod';
import { CommonSchema } from '../common';
import { Ext, ExtendTemplate } from '../shared';
import { Platforms } from '../platforms';
import { Plugins } from '../plugins';

export const Extend = z.string().describe('extend another appConfig by id');

const Version = z.string().describe('Semver style version of your app');

const VersionCode = z.string().describe('Manual verride of generated version code');

const VersionFormat = z.string().describe(`Allows you to fine-tune app version defined in package.json or renative.json.

If you do not define versionFormat, no formatting will apply to version.

"versionFormat" : "0.0.0"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3

IN: 1.2.3 OUT: 1.2.3



"versionFormat" : "0.0.0.0.0"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3.4.56

IN: 1.2.3 OUT: 1.2.3

"versionFormat" : "0.0.0.x.x.x.x"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3.rc.4.build.56

IN: 1.2.3 OUT: 1.2.3

`);

const VersionCodeFormat = z.string().describe(`Allows you to fine-tune auto generated version codes.

Version code is autogenerated from app version defined in package.json or renative.json.

NOTE: If you define versionCode manually this formatting will not apply.

EXAMPLE 1:

default value: 00.00.00

IN: 1.2.3-rc.4+build.56 OUT: 102030456

IN: 1.2.3 OUT: 10203

EXAMPLE 2:

"versionCodeFormat" : "00.00.00.00.00"

IN: 1.2.3-rc.4+build.56 OUT: 102030456

IN: 1.2.3 OUT: 102030000

EXAMPLE 3:

"versionCodeFormat" : "00.00.00.0000"

IN: 1.0.23-rc.15 OUT: 100230015

IN: 1.0.23 OUT: 100230000

`);

const Id = z
    .string()
    .describe('ID of the app in `./appConfigs/[APP_ID]/renative.json`. MUST match APP_ID name of the folder');

const Hidden = z
    .boolean()
    .describe(
        'If set to true in `./appConfigs/[APP_ID]/renative.json` the APP_ID will be hidden from list of appConfigs `-c`'
    );

//LEVEl 0 (ROOT)

export const RootAppSchemaPartial = z.object({
    id: z.optional(Id),
    version: z.optional(Version),
    versionCode: z.optional(VersionCode),
    versionFormat: z.optional(VersionFormat),
    versionCodeFormat: z.optional(VersionCodeFormat),

    custom: z.optional(Ext),
    hidden: z.optional(Hidden),
    extendsTemplate: z.optional(ExtendTemplate),
    extend: z.optional(Extend),
});

export const RootAppSchema = RootAppSchemaPartial.merge(
    z.object({
        common: z.optional(CommonSchema),
        platforms: z.optional(Platforms),
        plugins: z.optional(Plugins),
    })
);

export type _RootAppSchemaPartialType = z.infer<typeof RootAppSchemaPartial>;

export type _RootAppSchemaType = z.infer<typeof RootAppSchema>;
