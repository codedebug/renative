import { z } from 'zod';
import { BuildSchemeBase, BundleId, Ext, HexColor, Runtime } from '../shared';
import { PlatformBase } from '../platforms/base';

// DEPRECATED?
export const SplashScreen = z.boolean().describe('Enable or disable splash screen');

const IncludedPermissions = z
    .array(z.string())
    .describe(
        "Allows you to include specific permissions by their KEY defined in `permissions` object. Use: `['*']` to include all"
    );

//DEPRECATED??
const ExcludedPermissions = z
    .array(z.string())
    .describe(
        "Allows you to exclude specific permissions by their KEY defined in `permissions` object. Use: `['*']` to exclude all"
    );

const IncludedPlugins = z
    .array(z.string())
    .describe(
        "Defines an array of all included plugins for specific config or buildScheme. only full keys as defined in `plugin` should be used.\n\nNOTE: includedPlugins is evaluated before excludedPlugins. Use: `['*']` to include all"
    );

const ExcludedPlugins = z
    .array(z.string())
    .describe(
        "Defines an array of all excluded plugins for specific config or buildScheme. only full keys as defined in `plugin` should be used.\n\nNOTE: excludedPlugins is evaluated after includedPlugins. Use: `['*']` to exclude all"
    );

const Title = z
    .string()
    .describe(
        'Title of your app will be used to create title of the binary. ie App title of installed app iOS/Android app or Tab title of the website'
    );

const Description = z
    .string()
    .describe(
        'General description of your app. This prop will be injected to actual projects where description field is applicable'
    );

const Author = z.string().describe('Author name');

const IncludedFonts = z
    .array(z.string())
    .describe(
        'Array of fonts you want to include in specific app or scheme. Should use exact font file (without the extension) located in `./appConfigs/base/fonts` or `*` to mark all'
    );

const CommonBuildSchemes = z.record(z.string(), BuildSchemeBase.merge(PlatformBase));

export type _CommonBuildSchemesSchemaType = z.infer<typeof CommonBuildSchemes>;

const BackgroundColor = HexColor.describe('Defines root view backgroundColor for all platforms in HEX format');

const FontSources = z
    .array(z.string())
    .describe(
        'Array of paths to location of external Fonts. you can use resolve function here example: `{{resolvePackage(react-native-vector-icons)}}/Fonts`'
    );

const AssetSources = z
    .array(z.string())
    .describe(
        'Array of paths to alternative external assets. this will take priority over ./appConfigs/base/assets folder on your local project. You can use resolve function here example: `{{resolvePackage(@flexn/template-starter)}}/appConfigs/base/assets`'
    );

export const License = z.string().describe('Injects license information into app');

const Version = z.string().describe('Semver style version of your app');

const VersionCode = z.string().describe('Manual verride of generated version code');

const VersionFormat = z.string().describe(`Allows you to fine-tune app version defined in package.json or renative.json.

If you do not define versionFormat, no formatting will apply to version.

"versionFormat" : "0.0.0"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3

IN: 1.2.3 OUT: 1.2.3



"versionFormat" : "0.0.0.0.0"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3.4.56

IN: 1.2.3 OUT: 1.2.3

"versionFormat" : "0.0.0.x.x.x.x"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3.rc.4.build.56

IN: 1.2.3 OUT: 1.2.3

`);

const VersionCodeFormat = z.string().describe(`Allows you to fine-tune auto generated version codes.

Version code is autogenerated from app version defined in package.json or renative.json.

NOTE: If you define versionCode manually this formatting will not apply.

EXAMPLE 1:

default value: 00.00.00

IN: 1.2.3-rc.4+build.56 OUT: 102030456

IN: 1.2.3 OUT: 10203

EXAMPLE 2:

"versionCodeFormat" : "00.00.00.00.00"

IN: 1.2.3-rc.4+build.56 OUT: 102030456

IN: 1.2.3 OUT: 102030000

EXAMPLE 3:

"versionCodeFormat" : "00.00.00.0000"

IN: 1.0.23-rc.15 OUT: 100230015

IN: 1.0.23 OUT: 100230000

`);

//LEVEl 1

export const CommonSchemaPartial = z.object({
    includedPermissions: z.optional(IncludedPermissions),
    excludedPermissions: z.optional(ExcludedPermissions),
    id: z.optional(BundleId),
    idSuffix: z.string().optional(),
    version: z.optional(Version),
    versionCode: z.optional(VersionCode),
    versionFormat: z.optional(VersionFormat),
    versionCodeFormat: z.optional(VersionCodeFormat),
    versionCodeOffset: z.number().optional(),
    title: z.optional(Title),
    description: z.optional(Description),
    author: z.optional(Author),
    license: z.optional(License),
    includedFonts: z.optional(IncludedFonts),
    backgroundColor: z.optional(BackgroundColor),
    splashScreen: z.optional(SplashScreen),
    fontSources: z.optional(FontSources),
    assetSources: z.optional(AssetSources),
    includedPlugins: z.optional(IncludedPlugins),
    excludedPlugins: z.optional(ExcludedPlugins),
    runtime: z.optional(Runtime),
    custom: z.optional(Ext),
});

export type _CommonSchemaPartialType = z.infer<typeof CommonSchemaPartial>;

export const CommonSchema = CommonSchemaPartial.extend({
    buildSchemes: z.optional(CommonBuildSchemes),
}).describe('Common config props used as default props for all available buildSchemes');
