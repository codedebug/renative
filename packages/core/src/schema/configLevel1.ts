import { z } from 'zod';
import {
    AssetSources,
    Author,
    BackgroundColor,
    BundleId,
    Description,
    ExcludedPlugins,
    FontSources,
    IncludedFonts,
    IncludedPermissions,
    IncludedPlugins,
    SplashScreen,
    Title,
} from './configLevel2';
import { Ext, Runtime } from './shared/configShared';
import { PlatformShared } from './shared/configPlatformShared';

export const CommonBuildSchemes = z.record(z.string(), PlatformShared);

//LEVEl 1

export const Common = z
    .object({
        buildSchemes: z.optional(CommonBuildSchemes),
        includedPermissions: z.optional(IncludedPermissions),
        id: z.optional(BundleId),
        title: z.optional(Title),
        description: z.optional(Description),
        author: z.optional(Author),
        includedFonts: z.optional(IncludedFonts),
        backgroundColor: z.optional(BackgroundColor),
        splashScreen: z.optional(SplashScreen),
        fontSources: z.optional(FontSources),
        assetSources: z.optional(AssetSources),
        includedPlugins: z.optional(IncludedPlugins),
        excludedPlugins: z.optional(ExcludedPlugins),
        runtime: z.optional(Runtime),
        ext: z.optional(Ext),
    })
    .describe('Common config props used as default props for all available buildSchemes');

export const Version = z.string().describe('Semver style version of your app');

export const VersionCode = z.string().describe('Manual verride of generated version code');

export const VersionFormat = z.string()
    .describe(`Allows you to fine-tune app version defined in package.json or renative.json.

If you do not define versionFormat, no formatting will apply to version.

"versionFormat" : "0.0.0"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3

IN: 1.2.3 OUT: 1.2.3



"versionFormat" : "0.0.0.0.0"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3.4.56

IN: 1.2.3 OUT: 1.2.3

"versionFormat" : "0.0.0.x.x.x.x"

IN: 1.2.3-rc.4+build.56 OUT: 1.2.3.rc.4.build.56

IN: 1.2.3 OUT: 1.2.3

`);

export const VersionCodeFormat = z.string().describe(`Allows you to fine-tune auto generated version codes.

Version code is autogenerated from app version defined in package.json or renative.json.

NOTE: If you define versionCode manually this formatting will not apply.

EXAMPLE 1:

default value: 00.00.00

IN: 1.2.3-rc.4+build.56 OUT: 102030456

IN: 1.2.3 OUT: 10203

EXAMPLE 2:

"versionCodeFormat" : "00.00.00.00.00"

IN: 1.2.3-rc.4+build.56 OUT: 102030456

IN: 1.2.3 OUT: 102030000

EXAMPLE 3:

"versionCodeFormat" : "00.00.00.0000"

IN: 1.0.23-rc.15 OUT: 100230015

IN: 1.0.23 OUT: 100230000

`);

export const Id = z
    .string()
    .describe('ID of the app in `./appConfigs/[APP_ID]/renative.json`. MUST match APP_ID name of the folder');

export const Hidden = z
    .boolean()
    .describe(
        'If set to true in `./appConfigs/[APP_ID]/renative.json` the APP_ID will be hidden from list of appConfigs `-c`'
    );

export const MonoRoot = z
    .boolean()
    .describe('Define custom path to monorepo root where starting point is project directory');

export const Env = z.record(z.string(), z.any()).describe('Object containing injected env variables');
