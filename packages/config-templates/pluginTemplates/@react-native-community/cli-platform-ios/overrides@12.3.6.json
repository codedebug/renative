{
    "overrides": {
        "build/tools/listIOSDevices.js": {
            "rawOutput.filter(device => !device.platform.includes('appletv') && !device.platform.includes('macos')).sort(device => device.simulator ? 1 : -1).map(device => {": "rawOutput.sort(device => device.simulator ? 1 : -1).map(device => { // <= PATCHED BY RENATIVE",
            "{\n      isAvailable: device.available,": "{\n      modelName:device.modelName, // <= PATCHED BY RENATIVE\n      isAvailable: device.available,"
        },
        "build/commands/runIOS/index.js": {
            "_cliTools().logger.error(`Could not find a device named: \"${_chalk().default.bold(String(deviceName))}\". ${printFoundDevices(devices)}`);": "_cliTools().logger.error(`Could not find a device: \"${_chalk().default.bold(String(deviceName))}\". ${printFoundDevices(devices)}`);\n   throw 'Could not find device'; // <= PATCHED BY RENATIVE",
            "throw new (_cliTools().CLIError)(`Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${_chalk().default.bold('brew install ios-deploy')}\" and try again.`);": "// <= PATCHED BY RENATIVE, remove ios-deploy check", 
            "const iosDeployInstallArgs = ['--bundle', appPath, '--id', selectedDevice.udid, '--justlaunch'];": "  if(!selectedDevice.modelName.includes('Apple TV')) {\n   const iosDeployInstallArgs = ['--bundle', appPath, '--id', selectedDevice.udid, '--justlaunch'];",
            "if (iosDeployOutput.error) {\n      throw new (_cliTools().CLIError)(`Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`);\n    }": "if (iosDeployOutput.error) {\n      throw new (_cliTools().CLIError)(`Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`);\n    }} else {\n        _cliTools().logger.info(`Installing your app on ${selectedDevice.name}`);\n        const iosInstallArgs = ['devicectl', 'device', 'install', 'app', '--device', selectedDevice.udid, appPath];\n        _cliTools().logger.info(`xcrun ${iosInstallArgs.join(' ')}`);\n        const iosInstallOutput = _child_process().default.spawnSync('xcrun', iosInstallArgs, {\n          stdio: 'pipe',\n          encoding: 'utf8',\n        });\n        const res = JSON.stringify(iosInstallOutput);\n        const installationUrl = res.substring(\n          res.indexOf('file:') || 0,\n          (res.indexOf('.app/') || 0) + '.app/'.length\n        );\n        _cliTools().logger.info(`Launching your app on ${selectedDevice.name}`);\n        const iosLaunchArgs = ['devicectl', 'device', 'process', 'launch', '--device', selectedDevice.udid, installationUrl];\n        _cliTools().logger.info(`xcrun ${iosLaunchArgs.join(' ')}`);\n        _child_process().default.spawnSync('xcrun', iosLaunchArgs, {\n          stdio: 'inherit'\n        });\n        if (iosInstallOutput.stderr) {\n          throw new (_cliTools().CLIError)(`Failed to install the app on the device. We've encountered an error: ${iosInstallOutput.stderr}`);\n        }\n    }"
        }
    }
}
 